function [ children, scores ] = generateChildren( board, turn, agentTurn, scoreAgent, scoreOpp )
   [ snail_x, snail_y ] = find( board == turn );
   % initialize children list
   children = zeros(8, 8, 1);
   % initialize scores list
   scores = zeros(1, 1);
   
   %child generated by up movement
   temp_x = snail_x - 1;
   [ islegal, movement ] = isLegal( board, temp_x, snail_y, turn );
   
   % make a temp children list to save data while increasing children list
   % size
   tempChildren = children;
   if islegal
       % increment in scores based on turn
       mark = floor(turn/10);
       if turn == agentTurn
           if board(temp_x, snail_y) == mark
               scores(1, 1) = scoreAgent;
           else
               scores(1, 1) = scoreAgent + 1;
           end
       else
           if board(temp_x, snail_y) == mark
               scores(1, 1) = scoreOpp;
           else
               scores(1, 1) = scoreOpp + 1;
           end 
       end
       
       % generate children
       tempChildren(:, :, 1) = board(:, :);
       if turn == 11
        tempChildren(snail_x, snail_y, 1) = 1;
       else
        tempChildren(snail_x, snail_y, 1) = 2;
       end
       %check sliding
       [ x, y ] = slideSnail( tempChildren(:, :, 1), temp_x, snail_y, turn, movement );
       tempChildren(x, y, 1) = turn;
       children(:, :, 1) = tempChildren;
   end
   
   %child generated due to right move
   temp_y = snail_y + 1;
   [ islegal, movement ] = isLegal(board, snail_x, temp_y, turn);
   tempScores = scores;
   
   if islegal
       
       % increment in score based on condition
       if scores(1, 1) ~= 0
           scores = zeros(1, 2);
           scores(1, 1) = tempScores(1, 1);
       end

       [ temp length ] = size(scores);
       mark = floor(turn/10);
       if turn == agentTurn
           if board(snail_x, temp_y) == mark
               scores(1, length) = scoreAgent;
           else
               scores(1, length) = scoreAgent + 1;
           end
       else
           if board(snail_x, temp_y) == mark
               scores(1, length) = scoreOpp;
           else
               scores(1, length) = scoreOpp + 1;
           end 
       end
       
       % generation of children
       if tempChildren(snail_x, snail_y, 1) ~= 0
           children = zeros(8, 8, 2);
           children(:, :, 1) = tempChildren(:, :, 1);
       end
       
       [ temp temp length ] = size(children);
       children( :, :, length ) = board(:, :);
       
        if turn == 11
            children(snail_x, snail_y, length) = 1;
        else
            children(snail_x, snail_y, length) = 2;
        end
       %check sliding
       [ x, y ] = slideSnail( children(:, :, 1), snail_x, temp_y, turn, movement );
       children(x, y, length) = turn;
       tempChildren = children;
   end
   
   %child generated due to down movement
   temp_x  = snail_x + 1;
   [ islegal, movement ] = isLegal(board, temp_x, snail_y, turn);
   tempScores = scores;
   
   if islegal
       
       % increment in score
       [ temp length ] = size(scores);
       if scores(1, 1) ~= 0
           length = length + 1;
           
           scores = zeros(1, length);
           for score = 1:length - 1
               scores(1, score) = tempScores(1, score);
           end
       end
       
       mark = floor(turn/10);
       if turn == agentTurn
           if board(temp_x, snail_y) == mark
               scores(1, length) = scoreAgent;
           else
               scores(1, length) = scoreAgent + 1;
           end
       else
           if board(temp_x, snail_y) == mark
               scores(1, length) = scoreOpp;
           else
               scores(1, length) = scoreOpp + 1;
           end 
       end
       
       % generation of scores
       tempScores = scores;
       [ temp temp length ] = size(tempChildren);
       if tempChildren(snail_x, snail_y, 1) ~= 0
           length = length + 1;
           
           children = zeros(8, 8, length);
           for child=1:length - 1
               children(:, :, child) = tempChildren(:, :, child);
           end
       end
       
       children(:, :, length) = board(:, :);
       if turn == 11
           children(snail_x, snail_y, length) = 1;
       else
           children(snail_x, snail_y, length) = 2;
       end
       
       %check sliding
       [ x, y ] = slideSnail( children(:, :, 1), temp_x, snail_y, turn, movement );
       children(x, y, length) = turn;
       tempChildren = children;
   end
  
   %child generated due to left movement
   temp_y  = snail_y - 1;
   [ islegal, movement ] = isLegal(board, snail_x, temp_y, turn);
   tempScores = scores;
   
   if islegal
       
       % increment in socres
       [ temp length ] = size(scores);
       if scores(1, 1) ~= 0
           length = length + 1;
           
           scores = zeros(1, length);
           for score = 1:length - 1
               scores(1, score) = tempScores(1, score);
           end
       end
       
       mark = floor(turn/10);
       if turn == agentTurn
           if board(snail_x, temp_y) == mark
               scores(1, length) = scoreAgent;
           else
               scores(1, length) = scoreAgent + 1;
           end
       else
           if board(snail_x, temp_y) == mark
               scores(1, length) = scoreOpp;
           else
               scores(1, length) = scoreOpp + 1;
           end 
       end
       
       % generation of children
       [ temp temp length ] = size(tempChildren);
       if tempChildren(snail_x, snail_y, 1) ~= 0
           length = length + 1;
           
           children = zeros(8, 8, length);
           for child=1:length - 1
               children(:, :, child) = tempChildren(:, :, child);
           end
       end
       
       children(:, :, length) = board(:, :);
       if turn == 11
           children(snail_x, snail_y, length) = 1;
       else
           children(snail_x, snail_y, length) = 2;
       end
       
       %check sliding
       [ x, y ] = slideSnail( children(:, :, 1), snail_x, temp_y, turn, movement );
       children(x, y, length) = turn;
   end
end